ReactDOM.render(<App />, document.getElementById("root"));

여기서 <App />를 보자. 기본적으로 이것을 컴포넌트( component )라 부름.

그리고 react는 component와 함께 동작한다. 모든 것은 component임.

나는 컴포넌트를 만들게 될거고, 컴포넌트를 보기 좋게 만들것이다. 그리고 컴포넌트가 data를 보여주게 할거임.

기본적으로 컴포넌트는 HTML을 반환하는 함수임.

내가 작성한것처럼 function App() { reutrn ~~ }을 가지고있고 이것은 HTML을 반환할거임

<App /> 이부분이 우리가 컴포넌트를 사용하고자 할 때, 컴포넌트의 형태임.

ReactDOM.render(App, document.getElementById("root")); 이런식으로 사용할 수 없음.

이건 react로 동작하지 않기 때문.

react는 컴포넌트를 사용해서 HTML처럼 작성하려는 경우에 필요함.

JS와 HTML 사이의 이런 조합을 JSX라고 한다. 이건 react에서 나온 매우 custom한 유일한 개념임.

JSX는 내가 vue나 angular등 다른 분야로가면 통하지않음. 내가 react에 있는다면 jsx는 JS위에서 배워야할 유일한 것임.

컴포넌트를 만드는 방법은 간단함. 만들어보자

src폴더에 Potato.js파일 생성

내가 컴포넌트를 작성할 때 마다 import React from "react";를 써줘야함.

이걸 import하지않으면 react는 여기에 jsx가 있는 컴포넌트를 사용하는 것을 이해못함.

function Potato() {
  return <h1>I love Potato</h1>;
}

함수를 만들때 potato처럼 소문자로 시작하면안됨 대문자로 만들어주자 

컴포넌트를 생성하면 주의하라고 메시지를줌. VSC는 말해준다 나에게 이 Potato는 선언되었지만 아무도 사용하지않는다고

potato를 export해야하기 때문 사용하려면 export해야함 export default Potato해줌. 

컴포넌트를 만들었고 사용하기위해 export까지했음

index.js로 돌아와서 import Potato from "./Potato"; 하고 ReactDOM.render(<App /><Potato/>, document.getElementById("root")); 해보자.

될거같지만 안됨 !

이유는 react application이 하나의 컴포넌트만을 rendering 해야되기 때문임 그 컴포넌트가 여기선 App임 이를 해결하는 방법은 간단함

우리는 하나의 컴포넌트만을 렌더링해야하고 그건 App임 그럼 Potato를 App안으로 넣으면됨.

App.js에 import Potato from "./Potato"; 해주고 <Potato/>를 넣는다. return 되는 HTML안에.

function App() {
  return (
    <div>
      <h1>hello</h1>
      <Potato />
    </div>
  );
}

이런식으로 넣음. 정상적으로 작동한다. hello 아래에 <Potato/>를 사용했고

hello
I love Potato로 브라우저에 결과가나온다.

react는 컴포넌트를 가져와서 브라우저가 이해할 수 있는 평범한 일반 HTML로 만들었다.

jsx는 JS안의 HTML임. 내가 만들고 싶은 만큼 컴포넌트를 만들 수 있고 많은 컴포넌트를 return할 수 있다.

주의해야 할점은 react application은 하나의 컴포넌트만 렌더링 할 수 있음 App 처럼

==========================#2.0 END======================================

app.js에서 작업을 하자, file을 이동하면서 하고 싶지 않기때문.

기존 potato파일과 app.js에서 import한 potato를 지우자

app.js에서 Potato 컴포넌트를 선언하자. 잘돌아감.

jsx에서 이해해야 하는것은 컴포넌트에 정보를 보낼 수 있다는 점임.

react가 좋은 이유는 재사용 가능한 컴포넌트를 만들 수 있다는 점임. 컴포넌트를 계속해서 반복 사용할 수 있음.

컴포넌트에서 컴포넌트로. child component로 정보를 보내보자.

function Food() {
  return <h2>I like potato</h2>;
}

function App() {
  return (
    <div>
      <h1>hello</h1>
      <Food />
    </div>
  );
}
--------------------------- 코드를 보면서 설명함.

function App() 즉 application에서 food 컴포넌트로 정보를 보내고 그런 다음에 

food 컴포넌트에서 그 정보를 어떻게 사용하지에 대해서 설명할거임.

<Food />에 정보를 넣어보자 fav="kimchi" 같이, 그럼 <Food fav="kimchi"> 가됨.

이게 Food 컴포넌트에 정보를 보내는 방법임. 지금은 fav="kimchi"로 정보를 보낸상태지만, 사용하지않았음 아직.

react 첫 개념중 하나다. 저런식으로 컴포넌트에 정보를 보낸것은

Food component에 kimchi라는 value로 prop fav를 준거임. 

즉 Food 컴포넌트에 fav라는 이름의 property(props)를 kimchi라는 value로 준것.

value를 줄때 "kimchi"와 같이 String, boolean(true, false), number, array등 아무거나 원하는걸 줄 수 있음.

father component(부모 컴포넌트)에서 children component(자식 컴포넌트)로 원하는 많은 props를 보낼 수 있음.

다음과같이 value를 Food 컴포넌트에 보내면, 이것을 Food 컴포넌트의 인자로 써서 받을거임 function Food(props)로

props에는 우리가 보낸 value들이 전부 들어있다.

이러한 것들을 사용하기위해 우리는 create-react-app이 필요하다.

props에 여러가지 정보들이 들어있다 그것들은 객체로 들어있음 {} 

이제 인자에서 props를 작성하는 법을 알아보자. 우리는 fav라는 이름의 value(kimchi)를 props에 보냈음. 

props.fav를 콘솔에 찍으면 kimchi를 출력함. 앞서 말했듯이 props는 객체임. 

console.log(props); -> {fav : "kimchi"}
console.log(props.fav); -> kimchi

이제 props에 어떻게 들어있는지 안다.

function Food(props) 가아닌 function Food({ fav }) 를 인자로 줘보자. 

props object(객체) 내부에는 fav가있음. 이렇게 {fav}를 인자로 주는방법이 내가 내부에서 바로 얻는방법임.

props.fav 또는 {} 내부의 fav를 쓰는것은 같은거다.

인자를 받았으니 사용해보자 return에   return <h2>I like {fav}</h2>; 를 해주면 I like kimchi 가 성공적으로 브라우저에 표시된다.

function Food(props)로 인자를 주면

return <h2>I like {props.fav}</h2>; 로도 I like kimchi를 뽑을 수 이씀.

<div>
      <h1>hello</h1>
      <Food fav="kimchi" />
</div>

현재 App의 내부는 위와같고

<div>
      <h1>hello</h1>
      <Food fav="kimchi" />
      <Food fav="potato" />
      <Food fav="apple" />
</div>

이렇게 추가해주면 다 출력됨. jsx+props로 재사용하고있음

Food컴포넌트로 kimchi, potato, apple같은 정보를 보내고. 컴포넌트에서 브라우저로 뿌려주는거임.

<div></div>로 하나에 담아서 보내는 이유는 우리는 하나만 return 할 수 있음. 결국 function App은 부모컴포넌트로서 return하는거임.

==========================#2.1 END======================================

app에 <Food fav="blabla" /> 이런식으로 계속 넣는거는 효율적이지않음. 우리가 새로운 음식을 추가할 때마다 복사 붙여넣기 해야되기때문.

웹사이트에 동적 데이터를 추가하는 방법을 알아보자.

데이터가 이미 API왔다가 가정하자, function App()에서 return안에서 {} 중괄호를 쓰는거는 자바스크립트를 쓰겠다는 말임.

{foodILike.map(dish => ( <Food name={dish.name} picture={dish.image} /> ))} 다음과 같이 map함수를 쓴다.

map은 array의 각 item에서 function을 실행하는 array를 가지는 JS function이며 그 function의 result를 갖는 array를 나에게 주는거임.

foodILike라는 객체로이루어진 배열을 미리 선언해놨으며 name, imgae를 객체로 넣어놨음.

map의 첫번째 인자로 dish를줬음 dish가아니라도 됨 아무 변수명이나가능. 그렇게해서 안에 <Food name={dish.name}/> 이런식으로

컴포넌트에 정보를 전달함. 배열은 5개고 브라우저엔 순서대로 dish.name(5개의 name)이 출력됨.

image도 똑같은 방법으로 전달함.

Food 컴포넌트로 보냈으니 props를 전달하자. {name, picture}로 받음.

<h2>I like {name}</h2>
<img src={picture}></img>

정보를 받았으니 위와같이 씀. 정상적으로 5개의 name, picture(img)가 출력됨.

==========================#2.2 END======================================